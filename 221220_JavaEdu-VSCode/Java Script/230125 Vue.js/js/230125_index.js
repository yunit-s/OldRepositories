
// Blocking, Non-Blocking 함수

// Blocking
//      함수의 작업이 끝날 때까지(결과가 리턴될 때까지) 함수를 호출한 곳에서 프로그램의 수행이 일시중지되는 함수.

// alert('230125_index.js 실행');
// alert : 대표적인 blocking 함수다.
//      이 창을 닫지 않으면, 웹페이지가 계속 로딩 중으로 뜬다. 해당 페이지의 파싱이 끝나지 않았다는 의미.
//      alert 창을 닫으면 종료되는 것을 볼 수 있음.

// Non-Blocking
// let result = $.ajax({});
// ajax 호출을 해서 서버쪽 프로그램이 실행되고, 그 결과가 우리에게 JSON으로 보내지게 되는데는 시간이 걸린다.
//      그런데 그 시간을 기다리지 않는다. 결과값을 받아올 필요가 없기 때문.
//      ajax() 호출은 바로 리턴된다.
//      당연히 리턴되는 값은 ajax()의 결과값이 아니다.
// 결과값을 받는 방법은 어떻게 될까?
//      event driven 방식. 이 방식으로 결과를 받는다.
let result1 = $.ajax({
    async: true, // async: 동기, 비동기를 결정. true : 비동기 / false : 동기.
        // async: false 로 하면, ajax() 자체가 순차처리를 하게 되면서 blocking 처럼으로 동작하게 된다.
        // async는 true로 하는 것이 기본이다.
        // 동기로 사용하게 되면, ajax 끝나기 전까지 브라우저가 하얀 화면으로 유지되면서, 브라우저를 사용하지 못하게 되기 때문.
    url: '캬캬',
    type: 'get',
    data: {},
    success: function() {
        // ~~~~ 했을 때 콜백되는 콜백 함수야. 콜백 함수? ㅍㅍㅍㅍㅍㅍㅍㅍㅍㅍㅍ 할 때 끼워넣는 함수.
        // 이벤트 방식으로 콜백되는 함수다.
    }
});

// 동기라면, 두 개의 ajax 중 위에 있는 ajax부터 실행되는게 보장되어야 한다.
// 비동기라면, 아래에 있는 ajax가 먼저 실행될 수 있다. 순서가 보장되지 않는다.
let result2 = $.ajax({
    url: '호호',
    type: 'get',
    data: {},
    success: function() {
        // ~~~~ 했을 때 콜백되는 콜백 함수야. 콜백 함수? ㅍㅍㅍㅍㅍㅍㅍㅍㅍㅍㅍ 할 때 끼워넣는 함수.
        // 이벤트 방식으로 콜백되는 함수다.
    }
});

alert('230125_index.js 실행'); // 굳이 결과값을 받아올 필요가 없기 때문에 안 받는다.