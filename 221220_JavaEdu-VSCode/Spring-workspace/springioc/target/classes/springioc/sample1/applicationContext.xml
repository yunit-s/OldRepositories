<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="messageBean" class="springioc.sample1.MessageBeanImpl" scope="singleton">
		<!--
		impl
			: 특정 interface를 구현한 클래스가 존재한다는 의미. id가 인터페이스, class가 그걸 구현한 클래스
		-->
		
		<!--
		scope
			: 명시하지 않으면, singleton
		-->
		
		<!--
		constructor-arg
			생성자 인자를 이용해서 이 객체를 만들 수 있게 함
		value 태그
			인자의 타입이 primitive 타입일 때 사용한다.
			원래 primitive 타입과 reference 타입의 방식이 다른데, String은 value로 전달한다.
			
		-->
		<constructor-arg>
			<value>딸기</value>
		</constructor-arg>
		
		<!--
		property
			: setter를 사용하겠다는 의미
		-->
		<property name="cost">
			<value>3000</value>
		</property>
	</bean>
	
	<bean id="messageBean_1" class="springioc.sample1.MessageBeanImpl">
		<!--
		아무것도 명시하지 않으면, default 생성자에 의해서 만들어진다.
		-->
	</bean>
	
	<bean id="messageBean_2" class="springioc.sample1.MessageBeanImpl">
		<property name="cost">
			<value>4000</value>
		</property>
		<!--
		인자가 없기 때문에 기본 생성자 시행된다.
		setter를 통해 cost는 4000ㅇ로 초기화된다.
		-->
	</bean>
	
	<bean id="messageBean_3" class="springioc.sample1.MessageBeanImpl">
		<!--
		인자 2개 전달하는 생성자 호출
			value 속성
				굳이 <value> 하위태그를 쓰지 않아도, value 속성으로 표기해도 된다.
			type 속성
				명시하지 않을 경우, 알아서 자료형을 해석해서 처리한다.
				reference 타입인 경우, 풀 패키지명까지 다 적어야 한다.
				String은 흔히 사용되는 데이터타입이지만, reference타입이다.
			index 속성
				인자의 순서를 뒤바꿔도 알아서 매칭시켜줄 수 있긴 하다.
				다만, index를 사용할 경우, 인자의 순서를 지정해줄 수 있다.
		-->
		<constructor-arg index="1" type="int" value="7000" />
		<constructor-arg index="0" type="java.lang.String" value="바나나" />
	</bean>
</beans>
